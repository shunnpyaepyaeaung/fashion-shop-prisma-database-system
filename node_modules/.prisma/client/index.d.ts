
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model User
 */

export type User = {
  id: number
  username: string
  email: string
  password: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Product
 */

export type Product = {
  id: number
  productname: string
  price: number
  detail: string
  image: string
  createdAt: Date
  updatedAt: Date
  categoryId: number
}

/**
 * Model Category
 */

export type Category = {
  id: number
  categoryname: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Cart
 */

export type Cart = {
  id: number
  quantity: number
  userId: number
  productId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Order
 */

export type Order = {
  id: number
  quantity: number
  userId: number
  productId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Product: 'Product',
    Category: 'Category',
    Cart: 'Cart',
    Order: 'Order'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: number | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number | null
    email: number | null
    password: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateUserArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }

    



  export type UserSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Cart?: boolean | FindManyCartArgs
    Order?: boolean | FindManyOrderArgs
  }

  export type UserInclude = {
    Cart?: boolean | FindManyCartArgs
    Order?: boolean | FindManyOrderArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Cart'
        ? Array < CartGetPayload<S['include'][P]>>  :
        P extends 'Order'
        ? Array < OrderGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'Cart'
        ? Array < CartGetPayload<S['select'][P]>>  :
        P extends 'Order'
        ? Array < OrderGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Count the number of Users.
     * @param {FindManyUserArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {AggregateUserArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Cart<T extends FindManyCartArgs = {}>(args?: Subset<T, FindManyCartArgs>): CheckSelect<T, Promise<Array<Cart>>, Promise<Array<CartGetPayload<T>>>>;

    Order<T extends FindManyOrderArgs = {}>(args?: Subset<T, FindManyOrderArgs>): CheckSelect<T, Promise<Array<Order>>, Promise<Array<OrderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    count: number | null
    avg: ProductAvgAggregateOutputType | null
    sum: ProductSumAggregateOutputType | null
    min: ProductMinAggregateOutputType | null
    max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number
    price: number
    categoryId: number
  }

  export type ProductSumAggregateOutputType = {
    id: number
    price: number
    categoryId: number
  }

  export type ProductMinAggregateOutputType = {
    id: number
    productname: string | null
    price: number
    detail: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: number
  }

  export type ProductMaxAggregateOutputType = {
    id: number
    productname: string | null
    price: number
    detail: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: number
  }

  export type ProductCountAggregateOutputType = {
    id: number
    productname: number | null
    price: number
    detail: number | null
    image: number | null
    createdAt: number | null
    updatedAt: number | null
    categoryId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    productname?: true
    price?: true
    detail?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    productname?: true
    price?: true
    detail?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    productname?: true
    price?: true
    detail?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    _all?: true
  }

  export type AggregateProductArgs = {
    /**
     * Filter which Product to aggregate.
    **/
    where?: ProductWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends AggregateProductArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProductAggregateScalarType<T[P]>
  }

  export type GetProductAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProductAvgAggregateOutputType ? ProductAvgAggregateOutputType[P] : never
  }

    



  export type ProductSelect = {
    id?: boolean
    productname?: boolean
    price?: boolean
    detail?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Cart?: boolean | FindManyCartArgs
    Order?: boolean | FindManyOrderArgs
    categoryTable?: boolean | CategoryArgs
    categoryId?: boolean
  }

  export type ProductInclude = {
    Cart?: boolean | FindManyCartArgs
    Order?: boolean | FindManyOrderArgs
    categoryTable?: boolean | CategoryArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | FindManyProductArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Cart'
        ? Array < CartGetPayload<S['include'][P]>>  :
        P extends 'Order'
        ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends 'categoryTable'
        ? CategoryGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Product ?Product [P]
  : 
          P extends 'Cart'
        ? Array < CartGetPayload<S['select'][P]>>  :
        P extends 'Order'
        ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends 'categoryTable'
        ? CategoryGetPayload<S['select'][P]> : never
  } 
    : Product
  : Product


  export interface ProductDelegate {
    /**
     * Find zero or one Product that matches the filter.
     * @param {FindUniqueProductArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueProductArgs>(
      args: Subset<T, FindUniqueProductArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>

    /**
     * Find the first Product that matches the filter.
     * @param {FindFirstProductArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstProductArgs>(
      args?: Subset<T, FindFirstProductArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>

    /**
     * Find zero or more Products that matches the filter.
     * @param {FindManyProductArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyProductArgs>(
      args?: Subset<T, FindManyProductArgs>
    ): CheckSelect<T, Promise<Array<Product>>, Promise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: Subset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: Subset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: Subset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: Subset<T, ProductDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Products.
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: Subset<T, ProductUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: Subset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Find zero or one Product that matches the filter.
     * @param {FindUniqueProductArgs} args - Arguments to find a Product
     * @deprecated This will be deprecated please use prisma.product.findUnique
     * @example
     * // Get one Product
     * const product = await prisma.product.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueProductArgs>(
      args: Subset<T, FindUniqueProductArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>

    /**
     * Count the number of Products.
     * @param {FindManyProductArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyProductArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Product.
     * @param {AggregateProductArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProductArgs>(args: Subset<T, AggregateProductArgs>): Promise<GetProductAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Cart<T extends FindManyCartArgs = {}>(args?: Subset<T, FindManyCartArgs>): CheckSelect<T, Promise<Array<Cart>>, Promise<Array<CartGetPayload<T>>>>;

    Order<T extends FindManyOrderArgs = {}>(args?: Subset<T, FindManyOrderArgs>): CheckSelect<T, Promise<Array<Order>>, Promise<Array<OrderGetPayload<T>>>>;

    categoryTable<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type FindUniqueProductArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type FindFirstProductArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
    **/
    where?: ProductWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Products.
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type FindManyProductArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
    **/
    where?: ProductWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
    **/
    data: ProductCreateInput
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
    **/
    data: ProductUpdateInput
    /**
     * Choose, which Product to update.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    data: ProductUpdateManyMutationInput
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
    **/
    create: ProductCreateInput
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
    **/
    update: ProductUpdateInput
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    count: number | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number
  }

  export type CategorySumAggregateOutputType = {
    id: number
  }

  export type CategoryMinAggregateOutputType = {
    id: number
    categoryname: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number
    categoryname: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    categoryname: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    categoryname?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    categoryname?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    categoryname?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateCategoryArgs = {
    /**
     * Filter which Category to aggregate.
    **/
    where?: CategoryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends AggregateCategoryArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCategoryAggregateScalarType<T[P]>
  }

  export type GetCategoryAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CategoryAvgAggregateOutputType ? CategoryAvgAggregateOutputType[P] : never
  }

    



  export type CategorySelect = {
    id?: boolean
    categoryname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Product?: boolean | FindManyProductArgs
  }

  export type CategoryInclude = {
    Product?: boolean | FindManyProductArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | FindManyCategoryArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Product'
        ? Array < ProductGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Category ?Category [P]
  : 
          P extends 'Product'
        ? Array < ProductGetPayload<S['select'][P]>>  : never
  } 
    : Category
  : Category


  export interface CategoryDelegate {
    /**
     * Find zero or one Category that matches the filter.
     * @param {FindUniqueCategoryArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCategoryArgs>(
      args: Subset<T, FindUniqueCategoryArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>

    /**
     * Find the first Category that matches the filter.
     * @param {FindFirstCategoryArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCategoryArgs>(
      args?: Subset<T, FindFirstCategoryArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {FindManyCategoryArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCategoryArgs>(
      args?: Subset<T, FindManyCategoryArgs>
    ): CheckSelect<T, Promise<Array<Category>>, Promise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: Subset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: Subset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: Subset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: Subset<T, CategoryDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Categories.
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: Subset<T, CategoryUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: Subset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find zero or one Category that matches the filter.
     * @param {FindUniqueCategoryArgs} args - Arguments to find a Category
     * @deprecated This will be deprecated please use prisma.category.findUnique
     * @example
     * // Get one Category
     * const category = await prisma.category.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCategoryArgs>(
      args: Subset<T, FindUniqueCategoryArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category | null>, Prisma__CategoryClient<CategoryGetPayload<T> | null>>

    /**
     * Count the number of Categories.
     * @param {FindManyCategoryArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyCategoryArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Category.
     * @param {AggregateCategoryArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCategoryArgs>(args: Subset<T, AggregateCategoryArgs>): Promise<GetCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends FindManyProductArgs = {}>(args?: Subset<T, FindManyProductArgs>): CheckSelect<T, Promise<Array<Product>>, Promise<Array<ProductGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type FindUniqueCategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type FindFirstCategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type FindManyCategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
    **/
    data: CategoryCreateInput
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
    **/
    data: CategoryUpdateInput
    /**
     * Choose, which Category to update.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    data: CategoryUpdateManyMutationInput
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
    **/
    create: CategoryCreateInput
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
    **/
    update: CategoryUpdateInput
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Cart
   */


  export type AggregateCart = {
    count: number | null
    avg: CartAvgAggregateOutputType | null
    sum: CartSumAggregateOutputType | null
    min: CartMinAggregateOutputType | null
    max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
  }

  export type CartSumAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
  }

  export type CartMinAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartMaxAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartCountAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type CartAvgAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartSumAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartMinAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartMaxAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartCountAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateCartArgs = {
    /**
     * Filter which Cart to aggregate.
    **/
    where?: CartWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends AggregateCartArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCartAggregateScalarType<T[P]>
  }

  export type GetCartAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CartAvgAggregateOutputType ? CartAvgAggregateOutputType[P] : never
  }

    



  export type CartSelect = {
    id?: boolean
    quantity?: boolean
    userTable?: boolean | UserArgs
    userId?: boolean
    productTable?: boolean | ProductArgs
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CartInclude = {
    userTable?: boolean | UserArgs
    productTable?: boolean | ProductArgs
  }

  export type CartGetPayload<
    S extends boolean | null | undefined | CartArgs,
    U = keyof S
      > = S extends true
        ? Cart
    : S extends undefined
    ? never
    : S extends CartArgs | FindManyCartArgs
    ?'include' extends U
    ? Cart  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'userTable'
        ? UserGetPayload<S['include'][P]> :
        P extends 'productTable'
        ? ProductGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Cart ?Cart [P]
  : 
          P extends 'userTable'
        ? UserGetPayload<S['select'][P]> :
        P extends 'productTable'
        ? ProductGetPayload<S['select'][P]> : never
  } 
    : Cart
  : Cart


  export interface CartDelegate {
    /**
     * Find zero or one Cart that matches the filter.
     * @param {FindUniqueCartArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCartArgs>(
      args: Subset<T, FindUniqueCartArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart | null>, Prisma__CartClient<CartGetPayload<T> | null>>

    /**
     * Find the first Cart that matches the filter.
     * @param {FindFirstCartArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCartArgs>(
      args?: Subset<T, FindFirstCartArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart | null>, Prisma__CartClient<CartGetPayload<T> | null>>

    /**
     * Find zero or more Carts that matches the filter.
     * @param {FindManyCartArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCartArgs>(
      args?: Subset<T, FindManyCartArgs>
    ): CheckSelect<T, Promise<Array<Cart>>, Promise<Array<CartGetPayload<T>>>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends CartCreateArgs>(
      args: Subset<T, CartCreateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends CartDeleteArgs>(
      args: Subset<T, CartDeleteArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartUpdateArgs>(
      args: Subset<T, CartUpdateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartDeleteManyArgs>(
      args?: Subset<T, CartDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Carts.
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartUpdateManyArgs>(
      args: Subset<T, CartUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends CartUpsertArgs>(
      args: Subset<T, CartUpsertArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Find zero or one Cart that matches the filter.
     * @param {FindUniqueCartArgs} args - Arguments to find a Cart
     * @deprecated This will be deprecated please use prisma.cart.findUnique
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCartArgs>(
      args: Subset<T, FindUniqueCartArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart | null>, Prisma__CartClient<CartGetPayload<T> | null>>

    /**
     * Count the number of Carts.
     * @param {FindManyCartArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyCartArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Cart.
     * @param {AggregateCartArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCartArgs>(args: Subset<T, AggregateCartArgs>): Promise<GetCartAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userTable<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    productTable<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cart findUnique
   */
  export type FindUniqueCartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter, which Cart to fetch.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart findFirst
   */
  export type FindFirstCartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter, which Cart to fetch.
    **/
    where?: CartWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Carts.
    **/
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart findMany
   */
  export type FindManyCartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter, which Carts to fetch.
    **/
    where?: CartWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart create
   */
  export type CartCreateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to create a Cart.
    **/
    data: CartCreateInput
  }


  /**
   * Cart update
   */
  export type CartUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to update a Cart.
    **/
    data: CartUpdateInput
    /**
     * Choose, which Cart to update.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs = {
    data: CartUpdateManyMutationInput
    where?: CartWhereInput
  }


  /**
   * Cart upsert
   */
  export type CartUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The filter to search for the Cart to update in case it exists.
    **/
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
    **/
    create: CartCreateInput
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
    **/
    update: CartUpdateInput
  }


  /**
   * Cart delete
   */
  export type CartDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter which Cart to delete.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs = {
    where?: CartWhereInput
  }


  /**
   * Cart without action
   */
  export type CartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    count: number | null
    avg: OrderAvgAggregateOutputType | null
    sum: OrderSumAggregateOutputType | null
    min: OrderMinAggregateOutputType | null
    max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
  }

  export type OrderSumAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
  }

  export type OrderMinAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    quantity: number
    userId: number
    productId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    quantity?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateOrderArgs = {
    /**
     * Filter which Order to aggregate.
    **/
    where?: OrderWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends AggregateOrderArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetOrderAggregateScalarType<T[P]>
  }

  export type GetOrderAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof OrderAvgAggregateOutputType ? OrderAvgAggregateOutputType[P] : never
  }

    



  export type OrderSelect = {
    id?: boolean
    quantity?: boolean
    userTable?: boolean | UserArgs
    userId?: boolean
    productTable?: boolean | ProductArgs
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderInclude = {
    userTable?: boolean | UserArgs
    productTable?: boolean | ProductArgs
  }

  export type OrderGetPayload<
    S extends boolean | null | undefined | OrderArgs,
    U = keyof S
      > = S extends true
        ? Order
    : S extends undefined
    ? never
    : S extends OrderArgs | FindManyOrderArgs
    ?'include' extends U
    ? Order  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'userTable'
        ? UserGetPayload<S['include'][P]> :
        P extends 'productTable'
        ? ProductGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Order ?Order [P]
  : 
          P extends 'userTable'
        ? UserGetPayload<S['select'][P]> :
        P extends 'productTable'
        ? ProductGetPayload<S['select'][P]> : never
  } 
    : Order
  : Order


  export interface OrderDelegate {
    /**
     * Find zero or one Order that matches the filter.
     * @param {FindUniqueOrderArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueOrderArgs>(
      args: Subset<T, FindUniqueOrderArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order | null>, Prisma__OrderClient<OrderGetPayload<T> | null>>

    /**
     * Find the first Order that matches the filter.
     * @param {FindFirstOrderArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstOrderArgs>(
      args?: Subset<T, FindFirstOrderArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order | null>, Prisma__OrderClient<OrderGetPayload<T> | null>>

    /**
     * Find zero or more Orders that matches the filter.
     * @param {FindManyOrderArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyOrderArgs>(
      args?: Subset<T, FindManyOrderArgs>
    ): CheckSelect<T, Promise<Array<Order>>, Promise<Array<OrderGetPayload<T>>>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs>(
      args: Subset<T, OrderCreateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs>(
      args: Subset<T, OrderDeleteArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs>(
      args: Subset<T, OrderUpdateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: Subset<T, OrderDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Orders.
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs>(
      args: Subset<T, OrderUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs>(
      args: Subset<T, OrderUpsertArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Find zero or one Order that matches the filter.
     * @param {FindUniqueOrderArgs} args - Arguments to find a Order
     * @deprecated This will be deprecated please use prisma.order.findUnique
     * @example
     * // Get one Order
     * const order = await prisma.order.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueOrderArgs>(
      args: Subset<T, FindUniqueOrderArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order | null>, Prisma__OrderClient<OrderGetPayload<T> | null>>

    /**
     * Count the number of Orders.
     * @param {FindManyOrderArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyOrderArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Order.
     * @param {AggregateOrderArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateOrderArgs>(args: Subset<T, AggregateOrderArgs>): Promise<GetOrderAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userTable<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    productTable<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type FindUniqueOrderArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type FindFirstOrderArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
    **/
    where?: OrderWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Orders.
    **/
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type FindManyOrderArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Orders to fetch.
    **/
    where?: OrderWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The data needed to create a Order.
    **/
    data: OrderCreateInput
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The data needed to update a Order.
    **/
    data: OrderUpdateInput
    /**
     * Choose, which Order to update.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs = {
    data: OrderUpdateManyMutationInput
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The filter to search for the Order to update in case it exists.
    **/
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
    **/
    create: OrderCreateInput
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
    **/
    update: OrderUpdateInput
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter which Order to delete.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs = {
    where?: OrderWhereInput
  }


  /**
   * Order without action
   */
  export type OrderArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    productname: 'productname',
    price: 'price',
    detail: 'detail',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categoryId: 'categoryId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    categoryname: 'categoryname',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CartScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Cart?: CartListRelationFilter
    Order?: OrderListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    productname?: StringFilter | string
    price?: FloatFilter | number
    detail?: StringFilter | string
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Cart?: CartListRelationFilter
    Order?: OrderListRelationFilter
    categoryTable?: XOR<CategoryWhereInput, CategoryRelationFilter>
    categoryId?: IntFilter | number
  }

  export type ProductOrderByInput = {
    id?: SortOrder
    productname?: SortOrder
    price?: SortOrder
    detail?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductWhereUniqueInput = {
    id?: number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    categoryname?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Product?: ProductListRelationFilter
  }

  export type CategoryOrderByInput = {
    id?: SortOrder
    categoryname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CartWhereInput = {
    AND?: Enumerable<CartWhereInput>
    OR?: Enumerable<CartWhereInput>
    NOT?: Enumerable<CartWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    userTable?: XOR<UserWhereInput, UserRelationFilter>
    userId?: IntFilter | number
    productTable?: XOR<ProductWhereInput, ProductRelationFilter>
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CartOrderByInput = {
    id?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartWhereUniqueInput = {
    id?: number
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    userTable?: XOR<UserWhereInput, UserRelationFilter>
    userId?: IntFilter | number
    productTable?: XOR<ProductWhereInput, ProductRelationFilter>
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderOrderByInput = {
    id?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderWhereUniqueInput = {
    id?: number
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Cart?: CartCreateManyWithoutUserTableInput
    Order?: OrderCreateManyWithoutUserTableInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Cart?: CartUpdateManyWithoutUserTableInput
    Order?: OrderUpdateManyWithoutUserTableInput
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    productname: string
    price: number
    detail: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Cart?: CartCreateManyWithoutProductTableInput
    Order?: OrderCreateManyWithoutProductTableInput
    categoryTable: CategoryCreateOneWithoutProductInput
  }

  export type ProductUpdateInput = {
    productname?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Cart?: CartUpdateManyWithoutProductTableInput
    Order?: OrderUpdateManyWithoutProductTableInput
    categoryTable?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUpdateManyMutationInput = {
    productname?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    categoryname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Product?: ProductCreateManyWithoutCategoryTableInput
  }

  export type CategoryUpdateInput = {
    categoryname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateManyWithoutCategoryTableInput
  }

  export type CategoryUpdateManyMutationInput = {
    categoryname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartCreateInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userTable: UserCreateOneWithoutCartInput
    productTable: ProductCreateOneWithoutCartInput
  }

  export type CartUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTable?: UserUpdateOneRequiredWithoutCartInput
    productTable?: ProductUpdateOneRequiredWithoutCartInput
  }

  export type CartUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userTable: UserCreateOneWithoutOrderInput
    productTable: ProductCreateOneWithoutOrderInput
  }

  export type OrderUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTable?: UserUpdateOneRequiredWithoutOrderInput
    productTable?: ProductUpdateOneRequiredWithoutOrderInput
  }

  export type OrderUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CartListRelationFilter = {
    every?: CartWhereInput
    some?: CartWhereInput
    none?: CartWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type CartCreateManyWithoutUserTableInput = {
    create?: Enumerable<CartCreateWithoutUserTableInput>
    connect?: Enumerable<CartWhereUniqueInput>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutuserTableInput>
  }

  export type OrderCreateManyWithoutUserTableInput = {
    create?: Enumerable<OrderCreateWithoutUserTableInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutuserTableInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CartUpdateManyWithoutUserTableInput = {
    create?: Enumerable<CartCreateWithoutUserTableInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutUserTableInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutUserTableInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutUserTableInput>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutuserTableInput>
  }

  export type OrderUpdateManyWithoutUserTableInput = {
    create?: Enumerable<OrderCreateWithoutUserTableInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserTableInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserTableInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserTableInput>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutuserTableInput>
  }

  export type CartCreateManyWithoutProductTableInput = {
    create?: Enumerable<CartCreateWithoutProductTableInput>
    connect?: Enumerable<CartWhereUniqueInput>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutproductTableInput>
  }

  export type OrderCreateManyWithoutProductTableInput = {
    create?: Enumerable<OrderCreateWithoutProductTableInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutproductTableInput>
  }

  export type CategoryCreateOneWithoutProductInput = {
    create?: CategoryCreateWithoutProductInput
    connect?: CategoryWhereUniqueInput
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CartUpdateManyWithoutProductTableInput = {
    create?: Enumerable<CartCreateWithoutProductTableInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutProductTableInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutProductTableInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutProductTableInput>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutproductTableInput>
  }

  export type OrderUpdateManyWithoutProductTableInput = {
    create?: Enumerable<OrderCreateWithoutProductTableInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutProductTableInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutProductTableInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutProductTableInput>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutproductTableInput>
  }

  export type CategoryUpdateOneRequiredWithoutProductInput = {
    create?: CategoryCreateWithoutProductInput
    connect?: CategoryWhereUniqueInput
    update?: CategoryUpdateWithoutProductInput
    upsert?: CategoryUpsertWithoutProductInput
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
  }

  export type ProductCreateManyWithoutCategoryTableInput = {
    create?: Enumerable<ProductCreateWithoutCategoryTableInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutcategoryTableInput>
  }

  export type ProductUpdateManyWithoutCategoryTableInput = {
    create?: Enumerable<ProductCreateWithoutCategoryTableInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoryTableInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoryTableInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoryTableInput>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutcategoryTableInput>
  }

  export type UserCreateOneWithoutCartInput = {
    create?: UserCreateWithoutCartInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
  }

  export type ProductCreateOneWithoutCartInput = {
    create?: ProductCreateWithoutCartInput
    connect?: ProductWhereUniqueInput
    connectOrCreate?: ProductCreateOrConnectWithoutCartInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCartInput = {
    create?: UserCreateWithoutCartInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutCartInput
    upsert?: UserUpsertWithoutCartInput
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
  }

  export type ProductUpdateOneRequiredWithoutCartInput = {
    create?: ProductCreateWithoutCartInput
    connect?: ProductWhereUniqueInput
    update?: ProductUpdateWithoutCartInput
    upsert?: ProductUpsertWithoutCartInput
    connectOrCreate?: ProductCreateOrConnectWithoutCartInput
  }

  export type UserCreateOneWithoutOrderInput = {
    create?: UserCreateWithoutOrderInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
  }

  export type ProductCreateOneWithoutOrderInput = {
    create?: ProductCreateWithoutOrderInput
    connect?: ProductWhereUniqueInput
    connectOrCreate?: ProductCreateOrConnectWithoutOrderInput
  }

  export type UserUpdateOneRequiredWithoutOrderInput = {
    create?: UserCreateWithoutOrderInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutOrderInput
    upsert?: UserUpsertWithoutOrderInput
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
  }

  export type ProductUpdateOneRequiredWithoutOrderInput = {
    create?: ProductCreateWithoutOrderInput
    connect?: ProductWhereUniqueInput
    update?: ProductUpdateWithoutOrderInput
    upsert?: ProductUpsertWithoutOrderInput
    connectOrCreate?: ProductCreateOrConnectWithoutOrderInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CartCreateWithoutUserTableInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productTable: ProductCreateOneWithoutCartInput
  }

  export type CartCreateOrConnectWithoutuserTableInput = {
    where: CartWhereUniqueInput
    create: CartCreateWithoutUserTableInput
  }

  export type OrderCreateWithoutUserTableInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    productTable: ProductCreateOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutuserTableInput = {
    where: OrderWhereUniqueInput
    create: OrderCreateWithoutUserTableInput
  }

  export type CartUpdateWithWhereUniqueWithoutUserTableInput = {
    where: CartWhereUniqueInput
    data: CartUpdateWithoutUserTableInput
  }

  export type CartUpdateManyWithWhereWithoutUserTableInput = {
    where: CartScalarWhereInput
    data: CartUpdateManyMutationInput
  }

  export type CartScalarWhereInput = {
    AND?: Enumerable<CartScalarWhereInput>
    OR?: Enumerable<CartScalarWhereInput>
    NOT?: Enumerable<CartScalarWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    userId?: IntFilter | number
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CartUpsertWithWhereUniqueWithoutUserTableInput = {
    where: CartWhereUniqueInput
    update: CartUpdateWithoutUserTableInput
    create: CartCreateWithoutUserTableInput
  }

  export type OrderUpdateWithWhereUniqueWithoutUserTableInput = {
    where: OrderWhereUniqueInput
    data: OrderUpdateWithoutUserTableInput
  }

  export type OrderUpdateManyWithWhereWithoutUserTableInput = {
    where: OrderScalarWhereInput
    data: OrderUpdateManyMutationInput
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    userId?: IntFilter | number
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserTableInput = {
    where: OrderWhereUniqueInput
    update: OrderUpdateWithoutUserTableInput
    create: OrderCreateWithoutUserTableInput
  }

  export type CartCreateWithoutProductTableInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userTable: UserCreateOneWithoutCartInput
  }

  export type CartCreateOrConnectWithoutproductTableInput = {
    where: CartWhereUniqueInput
    create: CartCreateWithoutProductTableInput
  }

  export type OrderCreateWithoutProductTableInput = {
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userTable: UserCreateOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutproductTableInput = {
    where: OrderWhereUniqueInput
    create: OrderCreateWithoutProductTableInput
  }

  export type CategoryCreateWithoutProductInput = {
    categoryname: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutProductInput = {
    where: CategoryWhereUniqueInput
    create: CategoryCreateWithoutProductInput
  }

  export type CartUpdateWithWhereUniqueWithoutProductTableInput = {
    where: CartWhereUniqueInput
    data: CartUpdateWithoutProductTableInput
  }

  export type CartUpdateManyWithWhereWithoutProductTableInput = {
    where: CartScalarWhereInput
    data: CartUpdateManyMutationInput
  }

  export type CartUpsertWithWhereUniqueWithoutProductTableInput = {
    where: CartWhereUniqueInput
    update: CartUpdateWithoutProductTableInput
    create: CartCreateWithoutProductTableInput
  }

  export type OrderUpdateWithWhereUniqueWithoutProductTableInput = {
    where: OrderWhereUniqueInput
    data: OrderUpdateWithoutProductTableInput
  }

  export type OrderUpdateManyWithWhereWithoutProductTableInput = {
    where: OrderScalarWhereInput
    data: OrderUpdateManyMutationInput
  }

  export type OrderUpsertWithWhereUniqueWithoutProductTableInput = {
    where: OrderWhereUniqueInput
    update: OrderUpdateWithoutProductTableInput
    create: OrderCreateWithoutProductTableInput
  }

  export type CategoryUpdateWithoutProductInput = {
    categoryname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpsertWithoutProductInput = {
    update: CategoryUpdateWithoutProductInput
    create: CategoryCreateWithoutProductInput
  }

  export type ProductCreateWithoutCategoryTableInput = {
    productname: string
    price: number
    detail: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Cart?: CartCreateManyWithoutProductTableInput
    Order?: OrderCreateManyWithoutProductTableInput
  }

  export type ProductCreateOrConnectWithoutcategoryTableInput = {
    where: ProductWhereUniqueInput
    create: ProductCreateWithoutCategoryTableInput
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryTableInput = {
    where: ProductWhereUniqueInput
    data: ProductUpdateWithoutCategoryTableInput
  }

  export type ProductUpdateManyWithWhereWithoutCategoryTableInput = {
    where: ProductScalarWhereInput
    data: ProductUpdateManyMutationInput
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    productname?: StringFilter | string
    price?: FloatFilter | number
    detail?: StringFilter | string
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    categoryId?: IntFilter | number
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryTableInput = {
    where: ProductWhereUniqueInput
    update: ProductUpdateWithoutCategoryTableInput
    create: ProductCreateWithoutCategoryTableInput
  }

  export type UserCreateWithoutCartInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Order?: OrderCreateManyWithoutUserTableInput
  }

  export type UserCreateOrConnectWithoutCartInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutCartInput
  }

  export type ProductCreateWithoutCartInput = {
    productname: string
    price: number
    detail: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Order?: OrderCreateManyWithoutProductTableInput
    categoryTable: CategoryCreateOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCartInput = {
    where: ProductWhereUniqueInput
    create: ProductCreateWithoutCartInput
  }

  export type UserUpdateWithoutCartInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order?: OrderUpdateManyWithoutUserTableInput
  }

  export type UserUpsertWithoutCartInput = {
    update: UserUpdateWithoutCartInput
    create: UserCreateWithoutCartInput
  }

  export type ProductUpdateWithoutCartInput = {
    productname?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Order?: OrderUpdateManyWithoutProductTableInput
    categoryTable?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUpsertWithoutCartInput = {
    update: ProductUpdateWithoutCartInput
    create: ProductCreateWithoutCartInput
  }

  export type UserCreateWithoutOrderInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Cart?: CartCreateManyWithoutUserTableInput
  }

  export type UserCreateOrConnectWithoutOrderInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutOrderInput
  }

  export type ProductCreateWithoutOrderInput = {
    productname: string
    price: number
    detail: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Cart?: CartCreateManyWithoutProductTableInput
    categoryTable: CategoryCreateOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderInput = {
    where: ProductWhereUniqueInput
    create: ProductCreateWithoutOrderInput
  }

  export type UserUpdateWithoutOrderInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Cart?: CartUpdateManyWithoutUserTableInput
  }

  export type UserUpsertWithoutOrderInput = {
    update: UserUpdateWithoutOrderInput
    create: UserCreateWithoutOrderInput
  }

  export type ProductUpdateWithoutOrderInput = {
    productname?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Cart?: CartUpdateManyWithoutProductTableInput
    categoryTable?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUpsertWithoutOrderInput = {
    update: ProductUpdateWithoutOrderInput
    create: ProductCreateWithoutOrderInput
  }

  export type CartUpdateWithoutUserTableInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productTable?: ProductUpdateOneRequiredWithoutCartInput
  }

  export type OrderUpdateWithoutUserTableInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productTable?: ProductUpdateOneRequiredWithoutOrderInput
  }

  export type CartUpdateWithoutProductTableInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTable?: UserUpdateOneRequiredWithoutCartInput
  }

  export type OrderUpdateWithoutProductTableInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTable?: UserUpdateOneRequiredWithoutOrderInput
  }

  export type ProductUpdateWithoutCategoryTableInput = {
    productname?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Cart?: CartUpdateManyWithoutProductTableInput
    Order?: OrderUpdateManyWithoutProductTableInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.UserScalarFieldEnum`
 */
export type UserScalarFieldEnum = Prisma.UserScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProductScalarFieldEnum`
 */
export type ProductScalarFieldEnum = Prisma.ProductScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CategoryScalarFieldEnum`
 */
export type CategoryScalarFieldEnum = Prisma.CategoryScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CartScalarFieldEnum`
 */
export type CartScalarFieldEnum = Prisma.CartScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.OrderScalarFieldEnum`
 */
export type OrderScalarFieldEnum = Prisma.OrderScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateOutputType`
 */
export type UserCountAggregateOutputType = Prisma.UserCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateInputType`
 */
export type UserCountAggregateInputType = Prisma.UserCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProduct`
 */
export type AggregateProduct = Prisma.AggregateProduct

/**
 * @deprecated Renamed to `Prisma.ProductAvgAggregateOutputType`
 */
export type ProductAvgAggregateOutputType = Prisma.ProductAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProductSumAggregateOutputType`
 */
export type ProductSumAggregateOutputType = Prisma.ProductSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProductMinAggregateOutputType`
 */
export type ProductMinAggregateOutputType = Prisma.ProductMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProductMaxAggregateOutputType`
 */
export type ProductMaxAggregateOutputType = Prisma.ProductMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProductCountAggregateOutputType`
 */
export type ProductCountAggregateOutputType = Prisma.ProductCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProductArgs`
 */
export type AggregateProductArgs = Prisma.AggregateProductArgs

/**
 * @deprecated Renamed to `Prisma.ProductAvgAggregateInputType`
 */
export type ProductAvgAggregateInputType = Prisma.ProductAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProductSumAggregateInputType`
 */
export type ProductSumAggregateInputType = Prisma.ProductSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProductMinAggregateInputType`
 */
export type ProductMinAggregateInputType = Prisma.ProductMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProductMaxAggregateInputType`
 */
export type ProductMaxAggregateInputType = Prisma.ProductMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProductCountAggregateInputType`
 */
export type ProductCountAggregateInputType = Prisma.ProductCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProductSelect`
 */
export type ProductSelect = Prisma.ProductSelect

/**
 * @deprecated Renamed to `Prisma.ProductInclude`
 */
export type ProductInclude = Prisma.ProductInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueProductArgs`
 */
export type FindUniqueProductArgs = Prisma.FindUniqueProductArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstProductArgs`
 */
export type FindFirstProductArgs = Prisma.FindFirstProductArgs

/**
 * @deprecated Renamed to `Prisma.FindManyProductArgs`
 */
export type FindManyProductArgs = Prisma.FindManyProductArgs

/**
 * @deprecated Renamed to `Prisma.ProductCreateArgs`
 */
export type ProductCreateArgs = Prisma.ProductCreateArgs

/**
 * @deprecated Renamed to `Prisma.ProductUpdateArgs`
 */
export type ProductUpdateArgs = Prisma.ProductUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ProductUpdateManyArgs`
 */
export type ProductUpdateManyArgs = Prisma.ProductUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ProductUpsertArgs`
 */
export type ProductUpsertArgs = Prisma.ProductUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ProductDeleteArgs`
 */
export type ProductDeleteArgs = Prisma.ProductDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ProductDeleteManyArgs`
 */
export type ProductDeleteManyArgs = Prisma.ProductDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCategory`
 */
export type AggregateCategory = Prisma.AggregateCategory

/**
 * @deprecated Renamed to `Prisma.CategoryAvgAggregateOutputType`
 */
export type CategoryAvgAggregateOutputType = Prisma.CategoryAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CategorySumAggregateOutputType`
 */
export type CategorySumAggregateOutputType = Prisma.CategorySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CategoryMinAggregateOutputType`
 */
export type CategoryMinAggregateOutputType = Prisma.CategoryMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CategoryMaxAggregateOutputType`
 */
export type CategoryMaxAggregateOutputType = Prisma.CategoryMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CategoryCountAggregateOutputType`
 */
export type CategoryCountAggregateOutputType = Prisma.CategoryCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCategoryArgs`
 */
export type AggregateCategoryArgs = Prisma.AggregateCategoryArgs

/**
 * @deprecated Renamed to `Prisma.CategoryAvgAggregateInputType`
 */
export type CategoryAvgAggregateInputType = Prisma.CategoryAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CategorySumAggregateInputType`
 */
export type CategorySumAggregateInputType = Prisma.CategorySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CategoryMinAggregateInputType`
 */
export type CategoryMinAggregateInputType = Prisma.CategoryMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CategoryMaxAggregateInputType`
 */
export type CategoryMaxAggregateInputType = Prisma.CategoryMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CategoryCountAggregateInputType`
 */
export type CategoryCountAggregateInputType = Prisma.CategoryCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CategorySelect`
 */
export type CategorySelect = Prisma.CategorySelect

/**
 * @deprecated Renamed to `Prisma.CategoryInclude`
 */
export type CategoryInclude = Prisma.CategoryInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCategoryArgs`
 */
export type FindUniqueCategoryArgs = Prisma.FindUniqueCategoryArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCategoryArgs`
 */
export type FindFirstCategoryArgs = Prisma.FindFirstCategoryArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCategoryArgs`
 */
export type FindManyCategoryArgs = Prisma.FindManyCategoryArgs

/**
 * @deprecated Renamed to `Prisma.CategoryCreateArgs`
 */
export type CategoryCreateArgs = Prisma.CategoryCreateArgs

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateArgs`
 */
export type CategoryUpdateArgs = Prisma.CategoryUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateManyArgs`
 */
export type CategoryUpdateManyArgs = Prisma.CategoryUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CategoryUpsertArgs`
 */
export type CategoryUpsertArgs = Prisma.CategoryUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CategoryDeleteArgs`
 */
export type CategoryDeleteArgs = Prisma.CategoryDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CategoryDeleteManyArgs`
 */
export type CategoryDeleteManyArgs = Prisma.CategoryDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCart`
 */
export type AggregateCart = Prisma.AggregateCart

/**
 * @deprecated Renamed to `Prisma.CartAvgAggregateOutputType`
 */
export type CartAvgAggregateOutputType = Prisma.CartAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CartSumAggregateOutputType`
 */
export type CartSumAggregateOutputType = Prisma.CartSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CartMinAggregateOutputType`
 */
export type CartMinAggregateOutputType = Prisma.CartMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CartMaxAggregateOutputType`
 */
export type CartMaxAggregateOutputType = Prisma.CartMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CartCountAggregateOutputType`
 */
export type CartCountAggregateOutputType = Prisma.CartCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCartArgs`
 */
export type AggregateCartArgs = Prisma.AggregateCartArgs

/**
 * @deprecated Renamed to `Prisma.CartAvgAggregateInputType`
 */
export type CartAvgAggregateInputType = Prisma.CartAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CartSumAggregateInputType`
 */
export type CartSumAggregateInputType = Prisma.CartSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CartMinAggregateInputType`
 */
export type CartMinAggregateInputType = Prisma.CartMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CartMaxAggregateInputType`
 */
export type CartMaxAggregateInputType = Prisma.CartMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CartCountAggregateInputType`
 */
export type CartCountAggregateInputType = Prisma.CartCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CartSelect`
 */
export type CartSelect = Prisma.CartSelect

/**
 * @deprecated Renamed to `Prisma.CartInclude`
 */
export type CartInclude = Prisma.CartInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCartArgs`
 */
export type FindUniqueCartArgs = Prisma.FindUniqueCartArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCartArgs`
 */
export type FindFirstCartArgs = Prisma.FindFirstCartArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCartArgs`
 */
export type FindManyCartArgs = Prisma.FindManyCartArgs

/**
 * @deprecated Renamed to `Prisma.CartCreateArgs`
 */
export type CartCreateArgs = Prisma.CartCreateArgs

/**
 * @deprecated Renamed to `Prisma.CartUpdateArgs`
 */
export type CartUpdateArgs = Prisma.CartUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyArgs`
 */
export type CartUpdateManyArgs = Prisma.CartUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CartUpsertArgs`
 */
export type CartUpsertArgs = Prisma.CartUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CartDeleteArgs`
 */
export type CartDeleteArgs = Prisma.CartDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CartDeleteManyArgs`
 */
export type CartDeleteManyArgs = Prisma.CartDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateOrder`
 */
export type AggregateOrder = Prisma.AggregateOrder

/**
 * @deprecated Renamed to `Prisma.OrderAvgAggregateOutputType`
 */
export type OrderAvgAggregateOutputType = Prisma.OrderAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrderSumAggregateOutputType`
 */
export type OrderSumAggregateOutputType = Prisma.OrderSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrderMinAggregateOutputType`
 */
export type OrderMinAggregateOutputType = Prisma.OrderMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrderMaxAggregateOutputType`
 */
export type OrderMaxAggregateOutputType = Prisma.OrderMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrderCountAggregateOutputType`
 */
export type OrderCountAggregateOutputType = Prisma.OrderCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateOrderArgs`
 */
export type AggregateOrderArgs = Prisma.AggregateOrderArgs

/**
 * @deprecated Renamed to `Prisma.OrderAvgAggregateInputType`
 */
export type OrderAvgAggregateInputType = Prisma.OrderAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrderSumAggregateInputType`
 */
export type OrderSumAggregateInputType = Prisma.OrderSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrderMinAggregateInputType`
 */
export type OrderMinAggregateInputType = Prisma.OrderMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrderMaxAggregateInputType`
 */
export type OrderMaxAggregateInputType = Prisma.OrderMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrderCountAggregateInputType`
 */
export type OrderCountAggregateInputType = Prisma.OrderCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrderSelect`
 */
export type OrderSelect = Prisma.OrderSelect

/**
 * @deprecated Renamed to `Prisma.OrderInclude`
 */
export type OrderInclude = Prisma.OrderInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueOrderArgs`
 */
export type FindUniqueOrderArgs = Prisma.FindUniqueOrderArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstOrderArgs`
 */
export type FindFirstOrderArgs = Prisma.FindFirstOrderArgs

/**
 * @deprecated Renamed to `Prisma.FindManyOrderArgs`
 */
export type FindManyOrderArgs = Prisma.FindManyOrderArgs

/**
 * @deprecated Renamed to `Prisma.OrderCreateArgs`
 */
export type OrderCreateArgs = Prisma.OrderCreateArgs

/**
 * @deprecated Renamed to `Prisma.OrderUpdateArgs`
 */
export type OrderUpdateArgs = Prisma.OrderUpdateArgs

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyArgs`
 */
export type OrderUpdateManyArgs = Prisma.OrderUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.OrderUpsertArgs`
 */
export type OrderUpsertArgs = Prisma.OrderUpsertArgs

/**
 * @deprecated Renamed to `Prisma.OrderDeleteArgs`
 */
export type OrderDeleteArgs = Prisma.OrderDeleteArgs

/**
 * @deprecated Renamed to `Prisma.OrderDeleteManyArgs`
 */
export type OrderDeleteManyArgs = Prisma.OrderDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ProductWhereInput`
 */
export type ProductWhereInput = Prisma.ProductWhereInput

/**
 * @deprecated Renamed to `Prisma.ProductOrderByInput`
 */
export type ProductOrderByInput = Prisma.ProductOrderByInput

/**
 * @deprecated Renamed to `Prisma.ProductWhereUniqueInput`
 */
export type ProductWhereUniqueInput = Prisma.ProductWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CategoryWhereInput`
 */
export type CategoryWhereInput = Prisma.CategoryWhereInput

/**
 * @deprecated Renamed to `Prisma.CategoryOrderByInput`
 */
export type CategoryOrderByInput = Prisma.CategoryOrderByInput

/**
 * @deprecated Renamed to `Prisma.CategoryWhereUniqueInput`
 */
export type CategoryWhereUniqueInput = Prisma.CategoryWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CartWhereInput`
 */
export type CartWhereInput = Prisma.CartWhereInput

/**
 * @deprecated Renamed to `Prisma.CartOrderByInput`
 */
export type CartOrderByInput = Prisma.CartOrderByInput

/**
 * @deprecated Renamed to `Prisma.CartWhereUniqueInput`
 */
export type CartWhereUniqueInput = Prisma.CartWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.OrderWhereInput`
 */
export type OrderWhereInput = Prisma.OrderWhereInput

/**
 * @deprecated Renamed to `Prisma.OrderOrderByInput`
 */
export type OrderOrderByInput = Prisma.OrderOrderByInput

/**
 * @deprecated Renamed to `Prisma.OrderWhereUniqueInput`
 */
export type OrderWhereUniqueInput = Prisma.OrderWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateInput`
 */
export type ProductCreateInput = Prisma.ProductCreateInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateInput`
 */
export type ProductUpdateInput = Prisma.ProductUpdateInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateManyMutationInput`
 */
export type ProductUpdateManyMutationInput = Prisma.ProductUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CategoryCreateInput`
 */
export type CategoryCreateInput = Prisma.CategoryCreateInput

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateInput`
 */
export type CategoryUpdateInput = Prisma.CategoryUpdateInput

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateManyMutationInput`
 */
export type CategoryUpdateManyMutationInput = Prisma.CategoryUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CartCreateInput`
 */
export type CartCreateInput = Prisma.CartCreateInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateInput`
 */
export type CartUpdateInput = Prisma.CartUpdateInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyMutationInput`
 */
export type CartUpdateManyMutationInput = Prisma.CartUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateInput`
 */
export type OrderCreateInput = Prisma.OrderCreateInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateInput`
 */
export type OrderUpdateInput = Prisma.OrderUpdateInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyMutationInput`
 */
export type OrderUpdateManyMutationInput = Prisma.OrderUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.CartListRelationFilter`
 */
export type CartListRelationFilter = Prisma.CartListRelationFilter

/**
 * @deprecated Renamed to `Prisma.OrderListRelationFilter`
 */
export type OrderListRelationFilter = Prisma.OrderListRelationFilter

/**
 * @deprecated Renamed to `Prisma.FloatFilter`
 */
export type FloatFilter = Prisma.FloatFilter

/**
 * @deprecated Renamed to `Prisma.CategoryRelationFilter`
 */
export type CategoryRelationFilter = Prisma.CategoryRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProductListRelationFilter`
 */
export type ProductListRelationFilter = Prisma.ProductListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProductRelationFilter`
 */
export type ProductRelationFilter = Prisma.ProductRelationFilter

/**
 * @deprecated Renamed to `Prisma.CartCreateManyWithoutUserTableInput`
 */
export type CartCreateManyWithoutUserTableInput = Prisma.CartCreateManyWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateManyWithoutUserTableInput`
 */
export type OrderCreateManyWithoutUserTableInput = Prisma.OrderCreateManyWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyWithoutUserTableInput`
 */
export type CartUpdateManyWithoutUserTableInput = Prisma.CartUpdateManyWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyWithoutUserTableInput`
 */
export type OrderUpdateManyWithoutUserTableInput = Prisma.OrderUpdateManyWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartCreateManyWithoutProductTableInput`
 */
export type CartCreateManyWithoutProductTableInput = Prisma.CartCreateManyWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateManyWithoutProductTableInput`
 */
export type OrderCreateManyWithoutProductTableInput = Prisma.OrderCreateManyWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CategoryCreateOneWithoutProductInput`
 */
export type CategoryCreateOneWithoutProductInput = Prisma.CategoryCreateOneWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.FloatFieldUpdateOperationsInput`
 */
export type FloatFieldUpdateOperationsInput = Prisma.FloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyWithoutProductTableInput`
 */
export type CartUpdateManyWithoutProductTableInput = Prisma.CartUpdateManyWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyWithoutProductTableInput`
 */
export type OrderUpdateManyWithoutProductTableInput = Prisma.OrderUpdateManyWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateOneRequiredWithoutProductInput`
 */
export type CategoryUpdateOneRequiredWithoutProductInput = Prisma.CategoryUpdateOneRequiredWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateManyWithoutCategoryTableInput`
 */
export type ProductCreateManyWithoutCategoryTableInput = Prisma.ProductCreateManyWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateManyWithoutCategoryTableInput`
 */
export type ProductUpdateManyWithoutCategoryTableInput = Prisma.ProductUpdateManyWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutCartInput`
 */
export type UserCreateOneWithoutCartInput = Prisma.UserCreateOneWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateOneWithoutCartInput`
 */
export type ProductCreateOneWithoutCartInput = Prisma.ProductCreateOneWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutCartInput`
 */
export type UserUpdateOneRequiredWithoutCartInput = Prisma.UserUpdateOneRequiredWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateOneRequiredWithoutCartInput`
 */
export type ProductUpdateOneRequiredWithoutCartInput = Prisma.ProductUpdateOneRequiredWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutOrderInput`
 */
export type UserCreateOneWithoutOrderInput = Prisma.UserCreateOneWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateOneWithoutOrderInput`
 */
export type ProductCreateOneWithoutOrderInput = Prisma.ProductCreateOneWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutOrderInput`
 */
export type UserUpdateOneRequiredWithoutOrderInput = Prisma.UserUpdateOneRequiredWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateOneRequiredWithoutOrderInput`
 */
export type ProductUpdateOneRequiredWithoutOrderInput = Prisma.ProductUpdateOneRequiredWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatFilter`
 */
export type NestedFloatFilter = Prisma.NestedFloatFilter

/**
 * @deprecated Renamed to `Prisma.CartCreateWithoutUserTableInput`
 */
export type CartCreateWithoutUserTableInput = Prisma.CartCreateWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartCreateOrConnectWithoutuserTableInput`
 */
export type CartCreateOrConnectWithoutuserTableInput = Prisma.CartCreateOrConnectWithoutuserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateWithoutUserTableInput`
 */
export type OrderCreateWithoutUserTableInput = Prisma.OrderCreateWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateOrConnectWithoutuserTableInput`
 */
export type OrderCreateOrConnectWithoutuserTableInput = Prisma.OrderCreateOrConnectWithoutuserTableInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateWithWhereUniqueWithoutUserTableInput`
 */
export type CartUpdateWithWhereUniqueWithoutUserTableInput = Prisma.CartUpdateWithWhereUniqueWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyWithWhereWithoutUserTableInput`
 */
export type CartUpdateManyWithWhereWithoutUserTableInput = Prisma.CartUpdateManyWithWhereWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartScalarWhereInput`
 */
export type CartScalarWhereInput = Prisma.CartScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.CartUpsertWithWhereUniqueWithoutUserTableInput`
 */
export type CartUpsertWithWhereUniqueWithoutUserTableInput = Prisma.CartUpsertWithWhereUniqueWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateWithWhereUniqueWithoutUserTableInput`
 */
export type OrderUpdateWithWhereUniqueWithoutUserTableInput = Prisma.OrderUpdateWithWhereUniqueWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyWithWhereWithoutUserTableInput`
 */
export type OrderUpdateManyWithWhereWithoutUserTableInput = Prisma.OrderUpdateManyWithWhereWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderScalarWhereInput`
 */
export type OrderScalarWhereInput = Prisma.OrderScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.OrderUpsertWithWhereUniqueWithoutUserTableInput`
 */
export type OrderUpsertWithWhereUniqueWithoutUserTableInput = Prisma.OrderUpsertWithWhereUniqueWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartCreateWithoutProductTableInput`
 */
export type CartCreateWithoutProductTableInput = Prisma.CartCreateWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CartCreateOrConnectWithoutproductTableInput`
 */
export type CartCreateOrConnectWithoutproductTableInput = Prisma.CartCreateOrConnectWithoutproductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateWithoutProductTableInput`
 */
export type OrderCreateWithoutProductTableInput = Prisma.OrderCreateWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderCreateOrConnectWithoutproductTableInput`
 */
export type OrderCreateOrConnectWithoutproductTableInput = Prisma.OrderCreateOrConnectWithoutproductTableInput

/**
 * @deprecated Renamed to `Prisma.CategoryCreateWithoutProductInput`
 */
export type CategoryCreateWithoutProductInput = Prisma.CategoryCreateWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.CategoryCreateOrConnectWithoutProductInput`
 */
export type CategoryCreateOrConnectWithoutProductInput = Prisma.CategoryCreateOrConnectWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateWithWhereUniqueWithoutProductTableInput`
 */
export type CartUpdateWithWhereUniqueWithoutProductTableInput = Prisma.CartUpdateWithWhereUniqueWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateManyWithWhereWithoutProductTableInput`
 */
export type CartUpdateManyWithWhereWithoutProductTableInput = Prisma.CartUpdateManyWithWhereWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CartUpsertWithWhereUniqueWithoutProductTableInput`
 */
export type CartUpsertWithWhereUniqueWithoutProductTableInput = Prisma.CartUpsertWithWhereUniqueWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateWithWhereUniqueWithoutProductTableInput`
 */
export type OrderUpdateWithWhereUniqueWithoutProductTableInput = Prisma.OrderUpdateWithWhereUniqueWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateManyWithWhereWithoutProductTableInput`
 */
export type OrderUpdateManyWithWhereWithoutProductTableInput = Prisma.OrderUpdateManyWithWhereWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpsertWithWhereUniqueWithoutProductTableInput`
 */
export type OrderUpsertWithWhereUniqueWithoutProductTableInput = Prisma.OrderUpsertWithWhereUniqueWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.CategoryUpdateWithoutProductInput`
 */
export type CategoryUpdateWithoutProductInput = Prisma.CategoryUpdateWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.CategoryUpsertWithoutProductInput`
 */
export type CategoryUpsertWithoutProductInput = Prisma.CategoryUpsertWithoutProductInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateWithoutCategoryTableInput`
 */
export type ProductCreateWithoutCategoryTableInput = Prisma.ProductCreateWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateOrConnectWithoutcategoryTableInput`
 */
export type ProductCreateOrConnectWithoutcategoryTableInput = Prisma.ProductCreateOrConnectWithoutcategoryTableInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateWithWhereUniqueWithoutCategoryTableInput`
 */
export type ProductUpdateWithWhereUniqueWithoutCategoryTableInput = Prisma.ProductUpdateWithWhereUniqueWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateManyWithWhereWithoutCategoryTableInput`
 */
export type ProductUpdateManyWithWhereWithoutCategoryTableInput = Prisma.ProductUpdateManyWithWhereWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.ProductScalarWhereInput`
 */
export type ProductScalarWhereInput = Prisma.ProductScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.ProductUpsertWithWhereUniqueWithoutCategoryTableInput`
 */
export type ProductUpsertWithWhereUniqueWithoutCategoryTableInput = Prisma.ProductUpsertWithWhereUniqueWithoutCategoryTableInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutCartInput`
 */
export type UserCreateWithoutCartInput = Prisma.UserCreateWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutCartInput`
 */
export type UserCreateOrConnectWithoutCartInput = Prisma.UserCreateOrConnectWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateWithoutCartInput`
 */
export type ProductCreateWithoutCartInput = Prisma.ProductCreateWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateOrConnectWithoutCartInput`
 */
export type ProductCreateOrConnectWithoutCartInput = Prisma.ProductCreateOrConnectWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutCartInput`
 */
export type UserUpdateWithoutCartInput = Prisma.UserUpdateWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutCartInput`
 */
export type UserUpsertWithoutCartInput = Prisma.UserUpsertWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateWithoutCartInput`
 */
export type ProductUpdateWithoutCartInput = Prisma.ProductUpdateWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.ProductUpsertWithoutCartInput`
 */
export type ProductUpsertWithoutCartInput = Prisma.ProductUpsertWithoutCartInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutOrderInput`
 */
export type UserCreateWithoutOrderInput = Prisma.UserCreateWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutOrderInput`
 */
export type UserCreateOrConnectWithoutOrderInput = Prisma.UserCreateOrConnectWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateWithoutOrderInput`
 */
export type ProductCreateWithoutOrderInput = Prisma.ProductCreateWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductCreateOrConnectWithoutOrderInput`
 */
export type ProductCreateOrConnectWithoutOrderInput = Prisma.ProductCreateOrConnectWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutOrderInput`
 */
export type UserUpdateWithoutOrderInput = Prisma.UserUpdateWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutOrderInput`
 */
export type UserUpsertWithoutOrderInput = Prisma.UserUpsertWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateWithoutOrderInput`
 */
export type ProductUpdateWithoutOrderInput = Prisma.ProductUpdateWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.ProductUpsertWithoutOrderInput`
 */
export type ProductUpsertWithoutOrderInput = Prisma.ProductUpsertWithoutOrderInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateWithoutUserTableInput`
 */
export type CartUpdateWithoutUserTableInput = Prisma.CartUpdateWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateWithoutUserTableInput`
 */
export type OrderUpdateWithoutUserTableInput = Prisma.OrderUpdateWithoutUserTableInput

/**
 * @deprecated Renamed to `Prisma.CartUpdateWithoutProductTableInput`
 */
export type CartUpdateWithoutProductTableInput = Prisma.CartUpdateWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.OrderUpdateWithoutProductTableInput`
 */
export type OrderUpdateWithoutProductTableInput = Prisma.OrderUpdateWithoutProductTableInput

/**
 * @deprecated Renamed to `Prisma.ProductUpdateWithoutCategoryTableInput`
 */
export type ProductUpdateWithoutCategoryTableInput = Prisma.ProductUpdateWithoutCategoryTableInput